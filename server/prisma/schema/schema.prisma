generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityLog {
  id        String   @id
  userId    String
  batchId   String?
  action    String
  details   String?
  createdAt DateTime @default(now())
  Batch     Batch?   @relation(fields: [batchId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Batch {
  id                         String                @id
  batchNumber                String                @unique
  productId                  String
  dateOfProduction           DateTime
  bestBeforeDate             DateTime
  sampleAnalysisStarted      DateTime?
  sampleAnalysisCompleted    DateTime?
  sampleAnalysisStatus       SampleAnalysisStatus  @default(PENDING)
  makerId                    String
  checkerId                  String?
  status                     BatchStatus           @default(DRAFT)
  rejectionRemarks           String?
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime
  ActivityLog                ActivityLog[]
  User_Batch_checkerIdToUser User?                 @relation("Batch_checkerIdToUser", fields: [checkerId], references: [id])
  User_Batch_makerIdToUser   User                  @relation("Batch_makerIdToUser", fields: [makerId], references: [id])
  Product                    Product               @relation(fields: [productId], references: [id])
  Notification               Notification[]
  standards                  Standard[]           
  methodologies              Methodology[]         
  unitOfMeasurements         UnitOfMeasurement[]   
  parameterValues BatchParameterValue[]
}


model ExportLog {
  id         String   @id
  fileName   String
  exportType String
  exportedBy String
  exportedAt DateTime @default(now())
}

model Methodology {
  id          String   @id
  name        String   @unique
  description String
  procedure   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Standards   Standard[] @relation("StandardMethodologies") 
  batches     Batch[] 
  batchParameterValues BatchParameterValue[]
  standardDefinitions  StandardDefinition[]
}

model Notification {
  id        String           @id
  userId    String
  batchId   String?
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  Batch     Batch?           @relation(fields: [batchId], references: [id])
  User      User             @relation(fields: [userId], references: [id])
}


model Permission {
  id        String   @id
  action    String
  resource  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Role      Role[]

  @@unique([action, resource])
}


model Product {
  id        String   @id
  name      String   @unique
  code      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  Batch     Batch[]
  standardCategories ProductStandardCategory[]
  parameters ProductParameter[]
}

model ProductParameter {
  id            String          @id @default(uuid())
  productId     String
  parameterId   String
  isRequired    Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  product       Product         @relation(fields: [productId], references: [id])
  parameter     StandardParameter @relation(fields: [parameterId], references: [id])

  @@unique([productId, parameterId])
}

model Role {
  id          String       @id
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  User        User[]
  Permission  Permission[]
}

model UnitOfMeasurement {
  id               String             @id
  name             String             @unique
  symbol           String
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  Standards        Standard[] @relation("StandardUnits") 
  batchParameterValues BatchParameterValue[]
  standardParameters   StandardParameter[]
  standardDefinitions  StandardDefinition[]
  batches          Batch[] 
}

model User {
  id                          String         @id
  email                       String         @unique
  name                        String
  password                    String
  roleId                      String
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime
  ActivityLog                 ActivityLog[]
  Batch_Batch_checkerIdToUser Batch[]        @relation("Batch_checkerIdToUser")
  Batch_Batch_makerIdToUser   Batch[]        @relation("Batch_makerIdToUser")
  Notification                Notification[]
  Role                        Role           @relation(fields: [roleId], references: [id])
  StandardsCreated    Standard[] @relation("StandardCreatedBy")
  StandardsModified   Standard[] @relation("StandardModifiedBy")
  standardDefinitionsCreated StandardDefinition[] @relation("StandardDefinitionsCreated")
  standardDefinitionsModified StandardDefinition[] @relation("StandardDefinitionsModified")

  // Training relations
  trainerTrainings            Training[]     @relation("TrainerTrainings")
  createdTrainings            Training[]     @relation("CreatedTrainings")
  uploadedDocuments           TrainingDocument[]
  uploadedPhotos              TrainingPhoto[]
  assignedFollowups           TrainingFollowup[] @relation("AssignedFollowups")
  createdFollowups            TrainingFollowup[] @relation("CreatedFollowups")
  trainingNotifications       TrainingNotification[]
  auditorProfile         Auditor?             @relation("UserAuditor")
  auditeeAudits          Audit[]              @relation("AuditeeAudits")
  createdAudits          Audit[]              @relation("CreatedAudits")
  assignedFindings       Finding[]            @relation("AssignedFindings")
  assignedActions        CorrectiveAction[]   @relation("AssignedActions")
  verifiedActions        CorrectiveAction[]   @relation("VerifiedActions")
  uploadedAuditDocuments AuditDocument[]
  createdReminders       AuditReminder[]      @relation("CreatedReminders")
  receivedReminders      AuditReminder[]      @relation("ReceivedReminders")
  auditNotifications     AuditNotification[]  @relation("AuditNotifications")
  responsibleForChecklistItems PreAuditChecklistItem[] @relation("ResponsibleForChecklistItems")
  createdChecklistItems        PreAuditChecklistItem[] @relation("CreatedChecklistItems")
  inspectedItems        AuditInspectionItem[] @relation("InspectedItems")
  uploadedFeedbackForms       FeedbackForm[]
  uploadedSessionPhotos  TrainingSessionPhoto[]  @relation("UploadedSessionPhotos")
}

enum BatchStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum NotificationType {
  BATCH_SUBMITTED
  BATCH_APPROVED
  BATCH_REJECTED
  SYSTEM
}

enum SampleAnalysisStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Standard {
  id              String   @id
  name            String   @unique
  code            String   @unique
  description     String
  categoryId      String
  createdById     String
  modifiedById    String?
  status          StandardStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  Category        StandardCategory @relation(fields: [categoryId], references: [id])
  CreatedBy       User     @relation("StandardCreatedBy", fields: [createdById], references: [id])
  ModifiedBy      User?    @relation("StandardModifiedBy", fields: [modifiedById], references: [id])
  batches         Batch[]
  
  methodologies   Methodology[] @relation("StandardMethodologies") // Opposite relation for Methodology
  units           UnitOfMeasurement[] @relation("StandardUnits")   // Opposite relation for UnitOfMeasurement
}

model StandardCategory {
  id          String     @id
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  parameters  StandardParameter[]
  Standards   Standard[]
  products    ProductStandardCategory[]
}

model ProductStandardCategory {
  id            String          @id @default(uuid())
  productId     String
  categoryId    String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relations
  product       Product         @relation(fields: [productId], references: [id])
  category      StandardCategory @relation(fields: [categoryId], references: [id])

  @@unique([productId, categoryId])
}

enum StandardStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
}

model StandardParameter {
  id               String            @id
  name             String            // "Appearance", "Texture", "Moisture %Max", etc.
  categoryId       String
  unitId           String?  
  productType      String?   
  description      String?
  dataType         ParameterDataType // Type of data this parameter stores
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  
  
  // Relations
  category         StandardCategory  @relation(fields: [categoryId], references: [id])
  batchValues      BatchParameterValue[]
  unit             UnitOfMeasurement? @relation(fields: [unitId], references: [id]) // Add this relation
  standards        StandardDefinition[]
  products         ProductParameter[]

  @@unique([name, categoryId, productType])
}

model StandardDefinition {
  id                String             @id
  parameterId       String
  standardValue     String             // The expected/standard value
  unitId            String?
  methodologyId     String?
  createdById       String
  modifiedById      String?
  status            StandardStatus     @default(ACTIVE)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  
  // Relations
  parameter         StandardParameter  @relation(fields: [parameterId], references: [id])
  unit              UnitOfMeasurement? @relation(fields: [unitId], references: [id])
  methodology       Methodology?       @relation(fields: [methodologyId], references: [id])
  CreatedBy         User               @relation("StandardDefinitionsCreated", fields: [createdById], references: [id])
  ModifiedBy        User?              @relation("StandardDefinitionsModified", fields: [modifiedById], references: [id])
  
  // Many-to-many with Standard
}

enum ParameterDataType {
  TEXT
  FLOAT
  INTEGER
  BOOLEAN
  PERCENTAGE
  DATE
}

model BatchParameterValue {
  id              String            @id
  batchId         String
  parameterId     String
  value           String            
  unitId          String?
  methodologyId   String?
  verificationResult    String?           
  verificationRemark    String?           
  verifiedById          String?           
  verifiedAt            DateTime?         
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  
  // Relations
  batch           Batch             @relation(fields: [batchId], references: [id])
  parameter       StandardParameter @relation(fields: [parameterId], references: [id])
  unit            UnitOfMeasurement? @relation(fields: [unitId], references: [id])
  methodology     Methodology?      @relation(fields: [methodologyId], references: [id])
  
  @@unique([batchId, parameterId])
}