enum TrainingType {
  TECHNICAL
  SAFETY
  COMPLIANCE
  ONBOARDING
  PROFESSIONAL_DEVELOPMENT
  WORKSHOP
  SEMINAR
}

enum TrainingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum DocumentType {
  COURSE_MATERIAL
  PRESENTATION
  AGENDA
  GUIDELINE
  CERTIFICATE
  ASSESSMENT
  FEEDBACK_FORM
  OTHER
}

model TrainingCalendar {
  id            String      @id @default(uuid())
  month         Int
  year          Int
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  trainings     Training[]

  @@unique([month, year])
}

model Training {
  id              String            @id @default(uuid())
  title           String
  description     String?
  trainingType    TrainingType
  status          TrainingStatus    @default(SCHEDULED)
  startDate       DateTime
  endDate         DateTime
  location        String
  maxParticipants Int?
  trainerId       String
  calendarId      String
  createdById     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  trainer         User              @relation("TrainerTrainings", fields: [trainerId], references: [id])
  calendar        TrainingCalendar  @relation(fields: [calendarId], references: [id])
  createdBy       User              @relation("CreatedTrainings", fields: [createdById], references: [id])
  
  sessions        TrainingSession[]
  documents       TrainingDocument[]
  attendance      Attendance[]
  participants    TrainingParticipant[]
  photos          TrainingPhoto[]
  feedback        TrainingFeedback[]
  followups       TrainingFollowup[]
  notifications   TrainingNotification[]
  inviteTokens    TrainingInviteToken[]
  feedbackForms   FeedbackForm[]
}

model TrainingSession {
  id              String      @id @default(uuid())
  trainingId      String
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  venue           String
  status          TrainingStatus  @default(SCHEDULED) 
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  training        Training    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  attendance      Attendance[]
  feedbackForms   FeedbackForm[]
  photos          TrainingSessionPhoto[]
}

model TrainingDocument {
  id              String        @id @default(uuid())
  trainingId      String
  sessionId       String?  
  title           String
  description     String?
  fileUrl         String
  filePath        String?
  documentType    DocumentType
  uploadedById    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  training        Training      @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  uploadedBy      User          @relation(fields: [uploadedById], references: [id])
}

model Participant {
  id              String      @id @default(uuid())
  name            String
  email           String      @unique
  phone           String?
  organization    String?
  position        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  trainings       TrainingParticipant[]
  attendances     Attendance[]
  feedbacks       TrainingFeedback[]
  inviteTokens    TrainingInviteToken[]
  feedbackForms   FeedbackForm[]
}

enum ParticipantType {
  INTERNAL
  EXTERNAL
}

model TrainingParticipant {
  id                    String           @id @default(uuid())
  trainingId            String
  participantId         String
  inviteSent            Boolean          @default(false)
  inviteSentAt          DateTime?
  inviteAccepted        Boolean          @default(false)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  
 training              Training         @relation(fields: [trainingId], references: [id], onDelete: Cascade)
 participant           Participant      @relation(fields: [participantId], references: [id])

  @@unique([trainingId, participantId])
}

model Attendance {
  id              String            @id @default(uuid())
  trainingId      String
  sessionId       String
  participantId   String  
  status          AttendanceStatus
  remarks         String?
  signatureUrl    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  training        Training          @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  session         TrainingSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant     Participant       @relation(fields: [participantId], references: [id])  

  @@unique([sessionId, participantId])
}

model TrainingPhoto {
  id              String      @id @default(uuid())
  trainingId      String
  photoUrl        String
  caption         String?
  uploadedById    String
  createdAt       DateTime    @default(now())
  
  training        Training    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  uploadedBy      User        @relation(fields: [uploadedById], references: [id])
}

model TrainingFeedback {
  id                  String      @id @default(uuid())
  trainingId          String
  participantId       String 
  contentRating       Int
  trainerRating       Int
  materialRating      Int
  venueRating         Int
  overallRating       Int
  comments            String?
  suggestedImprovements String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  training            Training    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  participant         Participant @relation(fields: [participantId], references: [id])  // Changed from user to participant

  @@unique([trainingId, participantId]) 
}

model FeedbackForm {
  id              String      @id @default(uuid())
  trainingId      String
  sessionId       String
  participantId   String
  fileUrl         String
  filePath        String?
  submittedAt     DateTime    @default(now())
  uploadedById    String      // Trainer who uploaded it
  
  training        Training    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  session         TrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant     Participant @relation(fields: [participantId], references: [id])
  uploadedBy      User        @relation(fields: [uploadedById], references: [id])

  @@unique([sessionId, participantId]) // One form per participant per session
}

model TrainingFollowup {
  id              String      @id @default(uuid())
  trainingId      String
  title           String
  description     String
  dueDate         DateTime?
  isCompleted     Boolean     @default(false)
  assignedToId    String
  createdById     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  completedAt     DateTime?
  
  training        Training    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  assignedTo      User        @relation("AssignedFollowups", fields: [assignedToId], references: [id])
  createdBy       User        @relation("CreatedFollowups", fields: [createdById], references: [id])
}

model TrainingNotification {
  id              String      @id @default(uuid())
  trainingId      String
  userId          String
  title           String
  message         String
  isRead          Boolean     @default(false)
  sentAt          DateTime    @default(now())
  readAt          DateTime?
  
  training        Training    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id])
}

model TrainingInviteToken {
  id              String    @id @default(uuid())
  token           String    @unique
  action          String    // "ACCEPT" or "DECLINE"
  trainingId      String
  participantId   String?   // Optional, can link to a specific participant
  email           String
  expiresAt       DateTime
  used            Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  training        Training  @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  participant     Participant? @relation(fields: [participantId], references: [id])  // Make this optional with ?

  @@index([token])
  
}

model TrainingSessionPhoto {
  id              String          @id @default(uuid())
  sessionId       String
  photoUrl        String
  caption         String?
  uploadedById    String
  createdAt       DateTime        @default(now())
  
  session         TrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  uploadedBy      User            @relation("UploadedSessionPhotos", fields: [uploadedById], references: [id])
}