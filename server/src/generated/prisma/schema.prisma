// Auto-generated schema - DO NOT EDIT DIRECTLY
// Generated on: Sun 11 May 2025 06:26:40 PM IST

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models and enums from schema.prisma
model ActivityLog {
  id        String   @id
  userId    String
  batchId   String?
  action    String
  details   String?
  createdAt DateTime @default(now())
  Batch     Batch?   @relation(fields: [batchId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Batch {
  id                         String                @id
  batchNumber                String                @unique
  productId                  String
  dateOfProduction           DateTime
  bestBeforeDate             DateTime
  sampleAnalysisStarted      DateTime?
  sampleAnalysisCompleted    DateTime?
  sampleAnalysisStatus       SampleAnalysisStatus  @default(PENDING)
  makerId                    String
  checkerId                  String?
  status                     BatchStatus           @default(DRAFT)
  rejectionRemarks           String?
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime
  ActivityLog                ActivityLog[]
  User_Batch_checkerIdToUser User?                 @relation("Batch_checkerIdToUser", fields: [checkerId], references: [id])
  User_Batch_makerIdToUser   User                  @relation("Batch_makerIdToUser", fields: [makerId], references: [id])
  Product                    Product               @relation(fields: [productId], references: [id])
  Notification               Notification[]
  standards                  Standard[]
  methodologies              Methodology[]
  unitOfMeasurements         UnitOfMeasurement[]
  parameterValues            BatchParameterValue[]
}

model ExportLog {
  id         String   @id
  fileName   String
  exportType String
  exportedBy String
  exportedAt DateTime @default(now())
}

model Methodology {
  id                   String                @id
  name                 String                @unique
  description          String
  procedure            String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  Standards            Standard[]            @relation("StandardMethodologies")
  batches              Batch[]
  batchParameterValues BatchParameterValue[]
  standardDefinitions  StandardDefinition[]
}

model Notification {
  id        String           @id
  userId    String
  batchId   String?
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  Batch     Batch?           @relation(fields: [batchId], references: [id])
  User      User             @relation(fields: [userId], references: [id])
}

model Permission {
  id        String   @id
  action    String
  resource  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Role      Role[]

  @@unique([action, resource])
}

model Product {
  id        String   @id
  name      String   @unique
  code      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  Batch     Batch[]
}

model Role {
  id          String       @id
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  User        User[]
  Permission  Permission[]
}

model UnitOfMeasurement {
  id                   String                @id
  name                 String                @unique
  symbol               String
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  Standards            Standard[]            @relation("StandardUnits")
  batchParameterValues BatchParameterValue[]
  standardDefinitions  StandardDefinition[]
  batches              Batch[]
}

model User {
  id                          String               @id
  email                       String               @unique
  name                        String
  password                    String
  roleId                      String
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime
  ActivityLog                 ActivityLog[]
  Batch_Batch_checkerIdToUser Batch[]              @relation("Batch_checkerIdToUser")
  Batch_Batch_makerIdToUser   Batch[]              @relation("Batch_makerIdToUser")
  Notification                Notification[]
  Role                        Role                 @relation(fields: [roleId], references: [id])
  StandardsCreated            Standard[]           @relation("StandardCreatedBy")
  StandardsModified           Standard[]           @relation("StandardModifiedBy")
  standardDefinitionsCreated  StandardDefinition[] @relation("StandardDefinitionsCreated")
  standardDefinitionsModified StandardDefinition[] @relation("StandardDefinitionsModified")

  // Training relations
  trainerTrainings       Training[]             @relation("TrainerTrainings")
  createdTrainings       Training[]             @relation("CreatedTrainings")
  trainingParticipations TrainingParticipant[]
  attendances            Attendance[]
  uploadedDocuments      TrainingDocument[]
  uploadedPhotos         TrainingPhoto[]
  feedbacks              TrainingFeedback[]
  assignedFollowups      TrainingFollowup[]     @relation("AssignedFollowups")
  createdFollowups       TrainingFollowup[]     @relation("CreatedFollowups")
  trainingNotifications  TrainingNotification[]
}

enum BatchStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum NotificationType {
  BATCH_SUBMITTED
  BATCH_APPROVED
  BATCH_REJECTED
  SYSTEM
}

enum SampleAnalysisStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Standard {
  id           String           @id
  name         String           @unique
  code         String           @unique
  description  String
  categoryId   String
  createdById  String
  modifiedById String?
  status       StandardStatus   @default(ACTIVE)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
  Category     StandardCategory @relation(fields: [categoryId], references: [id])
  CreatedBy    User             @relation("StandardCreatedBy", fields: [createdById], references: [id])
  ModifiedBy   User?            @relation("StandardModifiedBy", fields: [modifiedById], references: [id])
  batches      Batch[]

  methodologies Methodology[]       @relation("StandardMethodologies") // Opposite relation for Methodology
  units         UnitOfMeasurement[] @relation("StandardUnits") // Opposite relation for UnitOfMeasurement
}

model StandardCategory {
  id          String              @id
  name        String              @unique
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime
  parameters  StandardParameter[]
  Standards   Standard[]
}

enum StandardStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
}

model StandardParameter {
  id          String            @id
  name        String // "Appearance", "Texture", "Moisture %Max", etc.
  categoryId  String
  description String?
  dataType    ParameterDataType // Type of data this parameter stores
  createdAt   DateTime          @default(now())
  updatedAt   DateTime

  // Relations
  category    StandardCategory      @relation(fields: [categoryId], references: [id])
  batchValues BatchParameterValue[]
  standards   StandardDefinition[]
}

model StandardDefinition {
  id            String         @id
  parameterId   String
  standardValue String // The expected/standard value
  unitId        String?
  methodologyId String?
  createdById   String
  modifiedById  String?
  status        StandardStatus @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime

  // Relations
  parameter   StandardParameter  @relation(fields: [parameterId], references: [id])
  unit        UnitOfMeasurement? @relation(fields: [unitId], references: [id])
  methodology Methodology?       @relation(fields: [methodologyId], references: [id])
  CreatedBy   User               @relation("StandardDefinitionsCreated", fields: [createdById], references: [id])
  ModifiedBy  User?              @relation("StandardDefinitionsModified", fields: [modifiedById], references: [id])

  // Many-to-many with Standard
}

enum ParameterDataType {
  TEXT
  FLOAT
  INTEGER
  BOOLEAN
  PERCENTAGE
  DATE
}

model BatchParameterValue {
  id            String   @id
  batchId       String
  parameterId   String
  value         String // Store all values as strings, convert as needed
  unitId        String?
  methodologyId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime

  // Relations
  batch       Batch              @relation(fields: [batchId], references: [id])
  parameter   StandardParameter  @relation(fields: [parameterId], references: [id])
  unit        UnitOfMeasurement? @relation(fields: [unitId], references: [id])
  methodology Methodology?       @relation(fields: [methodologyId], references: [id])

  @@unique([batchId, parameterId])
}

// Models and enums from training.prisma
enum TrainingType {
  TECHNICAL
  SAFETY
  COMPLIANCE
  ONBOARDING
  PROFESSIONAL_DEVELOPMENT
  WORKSHOP
  SEMINAR
}

enum TrainingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum DocumentType {
  COURSE_MATERIAL
  PRESENTATION
  AGENDA
  GUIDELINE
  CERTIFICATE
  ASSESSMENT
  FEEDBACK_FORM
  OTHER
}

model TrainingCalendar {
  id          String     @id @default(uuid())
  month       Int
  year        Int
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  trainings   Training[]

  @@unique([month, year])
}

model Training {
  id              String         @id @default(uuid())
  title           String
  description     String?
  trainingType    TrainingType
  status          TrainingStatus @default(SCHEDULED)
  startDate       DateTime
  endDate         DateTime
  location        String
  maxParticipants Int?
  trainerId       String
  calendarId      String
  createdById     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  trainer   User             @relation("TrainerTrainings", fields: [trainerId], references: [id])
  calendar  TrainingCalendar @relation(fields: [calendarId], references: [id])
  createdBy User             @relation("CreatedTrainings", fields: [createdById], references: [id])

  sessions      TrainingSession[]
  documents     TrainingDocument[]
  attendance    Attendance[]
  participants  TrainingParticipant[]
  photos        TrainingPhoto[]
  feedback      TrainingFeedback[]
  followups     TrainingFollowup[]
  notifications TrainingNotification[]
}

model TrainingSession {
  id          String   @id @default(uuid())
  trainingId  String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  venue       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  training   Training     @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  attendance Attendance[]
}

model TrainingDocument {
  id           String       @id @default(uuid())
  trainingId   String
  title        String
  description  String?
  fileUrl      String
  documentType DocumentType
  uploadedById String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  uploadedBy User     @relation(fields: [uploadedById], references: [id])
}

model TrainingParticipant {
  id             String    @id @default(uuid())
  trainingId     String
  userId         String
  inviteSent     Boolean   @default(false)
  inviteSentAt   DateTime?
  inviteAccepted Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@unique([trainingId, userId])
}

model Attendance {
  id           String           @id @default(uuid())
  trainingId   String
  sessionId    String
  userId       String
  status       AttendanceStatus
  remarks      String?
  signatureUrl String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  training Training        @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  session  TrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id])

  @@unique([sessionId, userId])
}

model TrainingPhoto {
  id           String   @id @default(uuid())
  trainingId   String
  photoUrl     String
  caption      String?
  uploadedById String
  createdAt    DateTime @default(now())

  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  uploadedBy User     @relation(fields: [uploadedById], references: [id])
}

model TrainingFeedback {
  id                    String   @id @default(uuid())
  trainingId            String
  userId                String
  contentRating         Int
  trainerRating         Int
  materialRating        Int
  venueRating           Int
  overallRating         Int
  comments              String?
  suggestedImprovements String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@unique([trainingId, userId])
}

model TrainingFollowup {
  id           String    @id @default(uuid())
  trainingId   String
  title        String
  description  String
  dueDate      DateTime?
  isCompleted  Boolean   @default(false)
  assignedToId String
  createdById  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  completedAt  DateTime?

  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  assignedTo User     @relation("AssignedFollowups", fields: [assignedToId], references: [id])
  createdBy  User     @relation("CreatedFollowups", fields: [createdById], references: [id])
}

model TrainingNotification {
  id         String    @id @default(uuid())
  trainingId String
  userId     String
  title      String
  message    String
  isRead     Boolean   @default(false)
  sentAt     DateTime  @default(now())
  readAt     DateTime?

  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
}
